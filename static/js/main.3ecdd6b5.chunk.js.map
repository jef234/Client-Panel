{"version":3,"sources":["store.js","components/layouts/AppNavbar.js","components/clients/Clients.js","components/layouts/Sidebar.js","components/layouts/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","store","compose","reduxFirestore","userProfile","useFirestoreForProfile","createStore","createStoreWithFirebase","combineReducers","firestoreReducer","AppNavbar","className","to","href","type","data-toggle","data-target","id","Component","Clients","clients","firstName","lastName","email","balance","map","client","key","parseFloat","toFixed","Sidebar","Dashboard","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4UAwBAA,IAASC,cAjBc,CACnBC,OAAQ,0CACRC,WAAY,2CACZC,YAAa,kDACbC,UAAW,2BACXC,cAAe,uCACfC,kBAAmB,aACnBC,MAAO,4CAYOR,IAASS,YAA3B,IAoBeC,EAjBiBC,YAC5BC,yBAAeZ,IAZD,CACda,YAAa,QACbC,wBAAwB,IASIH,CAE9BI,IAUYC,CARMC,YAAgB,CAChCR,UAAWS,qBAIM,I,gCCfNC,E,uKAlBP,OACI,yBAAKC,UAAU,uDACX,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,eAAeE,KAAK,KAA3C,gBACA,4BAAQF,UAAU,iBAAiBG,KAAK,SAASC,cAAY,WAAWC,cAAY,cAChF,0BAAML,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BM,GAAG,aACzC,wBAAIN,UAAU,cACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,YAAvB,qB,GAXJO,aC6DTC,E,uKA3DP,IAAMC,EAAU,CAAC,CACbH,GAAI,aACJI,UAAW,QACXC,SAAU,UACVC,MAAO,kBACPC,QAAS,MACV,CACCP,GAAI,aACJI,UAAW,QACXC,SAAU,UACVC,MAAO,kBACPC,QAAS,WAGb,OAAIJ,EAEI,6BACI,yBAAKT,UAAU,OACX,yBAAKA,UAAU,SACX,4BACI,uBAAGA,UAAU,iBADjB,aAIJ,yBAAKA,UAAU,WAEnB,2BAAOA,UAAU,wCACb,2BAAOA,UAAU,iBACb,4BACI,oCACA,qCACA,uCACA,+BAGR,+BACKS,EAAQK,KAAI,SAAAC,GAAM,OACf,wBAAIC,IAAKD,EAAOT,IACZ,4BAAKS,EAAOL,UAAZ,IAAwBK,EAAOJ,UAC/B,4BAAKI,EAAOH,OACZ,gCAAMK,WAAWF,EAAOF,SAASK,QAAQ,IACzC,4BACI,kBAAC,IAAD,CAAMjB,GAAE,kBAAac,EAAOT,IAAMN,UAAU,4BAA2B,uBAAGA,UAAU,8BAApF,oBAarB,6C,GAxDGO,aCQPY,MARf,WACI,OACI,6BACI,kBAAC,IAAD,CAAMlB,GAAG,cAAcD,UAAU,6BAA4B,uBAAGA,UAAU,yBCWvEoB,MAbf,WACI,OACI,yBAAKpB,UAAU,OACX,yBAAKA,UAAU,UACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,SACX,kBAAC,EAAD,S,OCkBDqB,MAjBf,WACE,OACE,kBAAC,IAAD,CAAU/B,MAAOA,GACf,kBAAC,IAAD,KACE,yBAAKU,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,IAAIC,UAAWJ,UCR3BK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3ecdd6b5.chunk.js","sourcesContent":["import { createStore, combineReducers, compose } from 'redux'\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\nimport 'firebase/database'\r\nimport { reduxFirestore, firestoreReducer } from 'redux-firestore'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAS_Y1ffT4ObeMy6c74dvBEPTETU3qyNRs\",\r\n    authDomain: \"react-client-panel-9832d.firebaseapp.com\",\r\n    databaseURL: \"https://react-client-panel-9832d.firebaseio.com\",\r\n    projectId: \"react-client-panel-9832d\",\r\n    storageBucket: \"react-client-panel-9832d.appspot.com\",\r\n    messagingSenderId: \"1822124726\",\r\n    appId: \"1:1822124726:web:2755c7db05d7b9da8c5417\"\r\n}\r\n\r\n//react-redux-firebase configuration\r\nconst rrfConfig = {\r\n    userProfile: 'users',\r\n    useFirestoreForProfile: true // Firestore for Profile instead of Realtime DB\r\n}\r\n\r\n//Init firebase instance\r\nfirebase.initializeApp(firebaseConfig)\r\n//Init firestore\r\nconst firestore = firebase.firestore()\r\n\r\n//Add reactReduxFirebase enhancer when making store creator\r\nconst createStoreWithFirebase = compose(\r\n    reduxFirestore(firebase, rrfConfig)\r\n)(createStore)\r\n\r\nconst rootReducer = combineReducers({\r\n    firestore: firestoreReducer\r\n})\r\n\r\n//Create intial state\r\nconst initialState = {};\r\n\r\n//Create store\r\nconst store = createStoreWithFirebase(\r\n    rootReducer,\r\n    initialState\r\n)\r\n\r\nexport default store","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass AppNavbar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-md navbar-dark bg-primary mb-4\">\r\n                <Link to=\"/\" className=\"navbar-brand\" href=\"#\">Client Panel</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\">\r\n                    <span className=\"navbar-toggler-icon\" />\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                    <ul className=\"navbar-nav\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\">Dashboard</Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AppNavbar\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Clients extends Component {\r\n    render() {\r\n        const clients = [{\r\n            id: '4344343434',\r\n            firstName: 'Kavin',\r\n            lastName: 'Johnson',\r\n            email: 'kevin@gmail.com',\r\n            balance: '30'\r\n        }, {\r\n            id: '4344343634',\r\n            firstName: 'Kavin',\r\n            lastName: 'Johnson',\r\n            email: 'kevin@gmail.com',\r\n            balance: '300.22'\r\n        }]\r\n\r\n        if (clients) {\r\n            return (\r\n                <div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <h2>\r\n                                <i className=\"fas fa-users\"></i> Clients\r\n                            </h2>\r\n                        </div>\r\n                        <div className=\"col-6\" />\r\n                    </div>\r\n                    <table className=\"table table-striped table-responsive\">\r\n                        <thead className=\"thead inverse\">\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>Email</th>\r\n                                <th>Balance</th>\r\n                                <th />\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {clients.map(client => (\r\n                                <tr key={client.id}>\r\n                                    <td>{client.firstName} {client.lastName}</td>\r\n                                    <td>{client.email}</td>\r\n                                    <td>${parseFloat(client.balance).toFixed(2)}</td>\r\n                                    <td>\r\n                                        <Link to={`/client/${client.id}`} className=\"btn btn-secondary btn-sm\"><i className=\"fas fa-arrow-circle-right\"></i> Details</Link>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n\r\n\r\n\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return <h1>Loading..</h1>\r\n        }\r\n    }\r\n}\r\n\r\nexport default Clients","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Sidebar() {\r\n    return (\r\n        <div>\r\n            <Link to=\"/client/add\" className=\"btn btn-success btn-block\"><i className=\"fa fa-plus-circle\" /></Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react'\r\nimport Clients from '../clients/Clients'\r\nimport Sidebar from '../layouts/Sidebar'\r\n\r\nfunction Dashboard() {\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-10\">\r\n                <Clients />\r\n            </div>\r\n            <div className=\"col-2\">\r\n                <Sidebar />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport AppNavbar from './components/layouts/AppNavbar'\nimport Dashboard from './components/layouts/Dashboard'\n\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <div className=\"App\">\n          <AppNavbar />\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\" component={Dashboard} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}